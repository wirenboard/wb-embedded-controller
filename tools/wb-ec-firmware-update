#!/bin/bash

if grep -q "wirenboard,wirenboard-8xx" /proc/device-tree/compatible 2>/dev/null; then
    WBEC_SPIDEV="spi1"
elif grep -q "wirenboard,wirenboard-74x" /proc/device-tree/compatible 2>/dev/null; then
    WBEC_SPIDEV="spi2"
else
    echo "This Wiren Board has no EC (check, DTS is a proper one), exiting"
    exit 255
fi

DEFAULT_FIRMWARES_ORDER=$(ls /usr/lib/wb-ec-firmware/*.bin 2>/dev/null || true)

if [ "$1" = "--help" ]; then
    echo "Wiren Board Embedded Controller firmware update tool"
    echo
    echo "ATTENTION!"
    echo "This tool will update firmware on WB-EC."
    echo "Update process is dangerous and can brick your device!"
    echo "Ensure that you have power backup and you know what you are doing!"
    echo
    echo "Default firmwares order to flash:"
    echo "$DEFAULT_FIRMWARES_ORDER"
    echo "You can pass firmware file as argument"
    echo

    echo "Usage: $0"
    exit 0
fi

FIRMWARES_ORDER=$(echo -n "$1 "; echo $DEFAULT_FIRMWARES_ORDER)

GPIO_RESET="EC RESET"
GPIO_BOOT0="EC SWCLK/BOOT0"

BOOTLOADER_I2C_ADDR=0x56

DT_OVERLAY_NAME=wbec_fw_overlay
DT_OVERLAY_DIR=/sys/kernel/config/device-tree/overlays/$DT_OVERLAY_NAME
DT_OVERLAY="
/dts-v1/;
/plugin/;
/ {
    compatible = \"wirenboard,wirenboard-740\";

    fragment-wbec-disable {
        target = <&wbec>;
        __overlay__ {
            status = \"disabled\";
        };
    };

    fragment-spi-disable {
        target = <&${WBEC_SPIDEV}>;
        __overlay__ {
            status = \"disabled\";
        };
    };

    fragment-i2c-fw {
        target = <&i2c_wbec>;
        __overlay__ {
            status = \"okay\";
            #address-cells = <1>;
            #size-cells = <0>;
        };
    };
};
"

remove_overlay() {
    rmdir $DT_OVERLAY_DIR 2>/dev/null || true
}

remove_overlay_and_start_drivers() {
    remove_overlay

    # This script may be called from bootlet in chroot
    # where we can't manage services and kernel modules,
    # so this check will suppress error messages.
    if [[ -x "$(which ischroot)" ]] && ! ischroot; then
        modprobe pwrkey-wbec

        systemctl restart wb-mqtt-gpio
        systemctl restart wb-mqtt-adc
        systemctl restart wb-rules
        systemctl restart watchdog
    fi
}

is_wbec_running() {
    remove_overlay
    local rc=1
    local wbec_hwrev_path=$(ls /sys/bus/spi/drivers/wbec/spi*/hwrev 2>/dev/null || true)
    if [[ ! -z $wbec_hwrev_path ]]; then
        hwrev=$(cat $wbec_hwrev_path)
        # 4 msb: 0b1010 are set in case of incorrect firmware
        /bin/bash -c "(( ($hwrev >> 12) == 10 ))" && rc=1 || rc=0
    fi
    [ $rc -eq "0" ] && true || false
}

# Try to find GPIO
GPIO_RESET_NUM=$(gpiofind "$GPIO_RESET") || {
    echo "GPIO $GPIO_RESET not found"
    exit -1
}
GPIO_BOOT0_NUM=$(gpiofind "$GPIO_BOOT0") || {
    echo "GPIO $GPIO_BOOT0 not found"
    exit -1
}

# This script may be called from bootlet in chroot
# where we can't manage services and kernel modules,
# so this check will suppress error messages.
if [[ -x "$(which ischroot)" ]] && ! ischroot; then
    # Remove pwrkey driver
    modprobe -r pwrkey-wbec

    # Stop services
    systemctl stop wb-mqtt-gpio
    systemctl stop wb-mqtt-adc
    systemctl stop wb-rules
    systemctl stop watchdog
fi

trap remove_overlay_and_start_drivers EXIT

# WB-EC firmware would not start on incorrect hardware (because of fw's logic)
# => trying to flash another one
for FIRMWARE in $FIRMWARES_ORDER; do
    echo "Trying fw file: $FIRMWARE"

    # Check firmware file exists
    if [ ! -f "$FIRMWARE" ]; then
        echo "Firmware file $FIRMWARE not found"
        exit -1
    fi

    # Apply overlay to disable spi and enable i2c
    remove_overlay
    mkdir $DT_OVERLAY_DIR
    echo "$DT_OVERLAY" | dtc -Idts -Odtb > $DT_OVERLAY_DIR/dtbo
    sleep 1.0

    # Check that overlay is applied by status property
    if ! grep -q applied $DT_OVERLAY_DIR/status; then
        echo "Can't apply overlay"
        exit -1
    fi

    # Find i2c bus with name i2c_wbec
    I2C_BUS=/dev/$(i2cdetect -l | grep i2c_wbec | cut -f 1 -d$'\t') || {
        echo "I2C bus not found"
        exit -1
    }
    echo "I2C bus: $I2C_BUS"

    # Reset to bootloader
    gpioset $GPIO_BOOT0_NUM=1
    sleep 0.1
    gpioset $GPIO_RESET_NUM=1
    sleep 0.1
    gpioset $GPIO_RESET_NUM=0
    sleep 0.5
    gpioset $GPIO_BOOT0_NUM=0

    # Check, bootloader is running
    stm32flash $I2C_BUS -a$BOOTLOADER_I2C_ADDR || {
        echo "Bootloader not found"
        exit -1
    }

    # Write option bytes for stay in bootloader forever
    echo -n -e \\xAA\\xE1\\xFF\\xDB | stm32flash -w - -S 0x1FFF7800:4 -a$BOOTLOADER_I2C_ADDR $I2C_BUS || {
        echo "Can't write option bytes before firmware"
        exit -1
    }
    # Need to sleep here, because MCU is rebooted after option bytes written
    sleep 0.1
    # Update firmware
    stm32flash -w $FIRMWARE -a$BOOTLOADER_I2C_ADDR $I2C_BUS || {
        echo "Can't write firmware"
        exit -1
    }
    # Restore option bytes, go to main app
    echo -n -e \\xAA\\xE1\\xFF\\xDA | stm32flash -w - -S 0x1FFF7800:4 -a$BOOTLOADER_I2C_ADDR $I2C_BUS || {
        echo "Can't write option bytes after firmware"
        exit -1
    }

    # For start firmware
    sleep 1.0

    # Firmware is correct
    if is_wbec_running; then
        echo "Flashed correct fw: $FIRMWARE"
        break
    fi
done
